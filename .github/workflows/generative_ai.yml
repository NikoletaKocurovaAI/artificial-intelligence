name: Generative AI

on:
  push:
    paths:
      - 'generative_ai/**'
  pull_request:
    paths:
      - 'generative_ai/**'

env:
  # Common
  PYTHON_VERSION: "3.11"

  # Clean code
  BLACK_VERSION: "22.12.0"
  FLAKE_VERSION: "7.1.1"
  MYPY_VERSION: "1.13.0"

  # Tests
  TOX_VERSION: "4.23.2"

  # Build
  REPOSITORY_NAME: "artificial-intelligence"
  PACKAGE: "generative_ai"
  REGISTRY: "ghcr.io"

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Debug repository structure  # TODO remove temp step
        run: |
          echo "Repository directory:"
          ls -R /home/runner/work/artificial-intelligence/artificial-intelligence

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black==${{ env.BLACK_VERSION }} flake8==${{ env.FLAKE_VERSION }} mypy==${{ env.MYPY_VERSION }}

      - name: Formatter
        run: |
          echo "Current directory: $(pwd)"
          echo "Running command black $(pwd)/${{ env.PACKAGE }}"
          
          black "$(pwd)/${{ env.PACKAGE }}"

      - name: Type Checker
        run: |
          echo "Current directory: $(pwd)"
          mypy ${{ env.PACKAGE }}

      - name: Linter
        run: |
          echo "Current directory: $(pwd)"
          flake8 ${{ env.PACKAGE }}

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install tox==${{ env.TOX_VERSION }}

      - name: Test articles
        run: |
          cd ${{ env.PACKAGE }}
          echo "Current directory: $(pwd)"
          tox -c tox.ini -e test_articles

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Test integration articles
        run: |
          echo "Hello World"

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Build Tag
        run: |
          if [[ "${GITHUB_REF##*/}" == "master" ]]; then
            echo "BUILD_TAG=latest" >> $GITHUB_ENV
          else
            echo "BUILD_TAG=${GITHUB_SHA}" >> $GITHUB_ENV
          fi

      - name: Build Docker image
        run: |
          DOCKER_BUILD_CMD="docker build -t ${{ env.PACKAGE }} -f ${{ env.REPOSITORY_NAME }}/${{ env.PACKAGE }}/Dockerfile ."
          echo "Running command: $DOCKER_BUILD_CMD"
          $DOCKER_BUILD_CMD

          DOCKER_TAG_CMD="docker tag ${{ env.PACKAGE }} ${{ env.REGISTRY}}/${{ env.REPOSITORY_NAME}}/${{ env.PACKAGE}}:${{ env.BUILD_TAG}}"
          echo "Running command: $DOCKER_TAG_CMD"
          $DOCKER_TAG_CMD

          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY_NAME }}/${{ env.PACKAGE }}:${{ env.BUILD_TAG }}

  # TODO workflow triggered by "Git tag" event
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up kubectl
        run: |
          SET_CLI_CMD="gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}"
          echo "Running command: $SET_CLI_CMD"
          $SET_CLI_CMD

      - name: Switch to namespace
        run: |
          SET_CTX_CMD="kubectl config set-context --current --namespace=rin"
          echo "Running command: $SET_CTX_CMD"
          $SET_CTX_CMD

      - name: Apply Secrets
        run: |
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          
          APPLY_CMD="envsubst < deploy/generative_ai/secrets.yaml | kubectl apply -f -"
          echo "Running command: $APPLY_CMD"
          $APPLY_CMD

      - name: Apply NetworkPolicy
        run: |
          APPLY_CMD="kubectl apply -f deploy/generative_ai/netpol.yaml"
          echo "Running command: $APPLY_CMD"
          $APPLY_CMD

      - name: Apply Deployment
        run: |          
          export BUILD_TAG=${{ env.BUILD_TAG }}
          
          APPLY_CMD="envsubst < deploy/generative_ai/deployment.yaml | kubectl apply -f -"
          echo "Running command: $APPLY_CMD"
          $APPLY_CMD

      - name: Apply Service
        run: |
          APPLY_CMD="kubectl apply -f deploy/generative_ai/service.yaml"
          echo "Running command: $APPLY_CMD"
          $APPLY_CMD